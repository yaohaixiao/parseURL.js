{"version":3,"file":"parseURL.min.js","sources":["getURLSearchParams.js","getSearchParams.js","parseURLWithRegExp.js","_getURLPattern.js","parseURL.js","parseURLWithURLConstructor.js"],"sourcesContent":["/**\r\n * 返回 URL 地址中的查询参数（键/值）对象\r\n * ====================================================\r\n * @param {String} [url] - 可选参数，URL 地址\r\n * @returns {Object}\r\n */\r\nconst getURLSearchParams = (url = '') => {\r\n  const pattern = /([^?=&]+)(=([^&]*))/g\r\n  return (url.match(pattern) || []).reduce((a, v) => {\r\n    const index = v.indexOf('=')\r\n    const key = v.slice(0, index)\r\n    const value = v.slice(index + 1)\r\n    return (a[key] = value.replace(/\\+/g, ' ')), a\r\n  }, {})\r\n}\r\n\r\nexport default getURLSearchParams\r\n","import getURLSearchParams from './getURLSearchParams'\r\n\r\nconst getSearchParams = (url) => {\r\n  const params = getURLSearchParams(url)\r\n\r\n  return {\r\n    get(name) {\r\n      return params[name] || null\r\n    }\r\n  }\r\n}\r\n\r\nexport default getSearchParams\r\n","import getSearchParams from './getSearchParams'\r\nimport _getURLPattern from './_getURLPattern'\r\n\r\n/**\r\n * 分析 url 地址，将解析的结果作为对象返回，返回属性有：\r\n * 1. href - 完整 URL 地址\r\n * 2. origin - 原始输入\r\n * 3. protocol - 协议\r\n * 4. username - 用户名\r\n * 5. password - 密码\r\n * 6. host - 域名地址\r\n * 7. hostname - 域名名称\r\n * 8. port - 端口号\r\n * 9. path - 路径\r\n * 10. pathname - 路径名\r\n * 11. search - 查询参数\r\n * 12. searchParams\r\n * 13. hash - 哈希值\r\n * ====================================================\r\n * @param {String} url - URL地址\r\n * @param {String} [base] - 基准 URL 地址\r\n * @returns {Object|Null}\r\n */\r\nconst parseURLWithRegExp = (url, base = undefined) => {\r\n  const pattern = _getURLPattern()\r\n  const slashAtTheEnd = /\\/$/\r\n  let matches\r\n  let href\r\n  let hostname\r\n  let origin\r\n  let protocol\r\n  let username\r\n  let password\r\n  let port\r\n  let host\r\n  let pathname\r\n  let search\r\n  let path\r\n  let hash\r\n\r\n  if (base) {\r\n    // 移除 base 最后的斜杠 ‘/’\r\n    base = base.replace(slashAtTheEnd, '')\r\n\r\n    // 确保 url 开始有斜杠\r\n    if (!url.startsWith('/')) {\r\n      url = '/' + url\r\n    }\r\n\r\n    href = base + url\r\n  } else {\r\n    href = url\r\n  }\r\n\r\n  matches = pattern.exec(href)\r\n\r\n  if (matches === null) {\r\n    return null\r\n  }\r\n\r\n  hostname = matches[6]\r\n  protocol = matches[1] || ''\r\n  username = matches[3] || ''\r\n  password = matches[4] || ''\r\n  port = matches[13] ? matches[13].replace(':', '') : ''\r\n  host = matches[5]\r\n  pathname = matches[15]\r\n  search = matches[17] || ''\r\n  origin = protocol + '//' + host\r\n  path = matches[14]\r\n  hash = matches[18] || ''\r\n\r\n  return {\r\n    href,\r\n    origin,\r\n    protocol,\r\n    username,\r\n    password,\r\n    hostname,\r\n    port,\r\n    host,\r\n    pathname,\r\n    search,\r\n    searchParams: getSearchParams(search),\r\n    path,\r\n    hash\r\n  }\r\n}\r\n\r\nexport default parseURLWithRegExp\r\n","const _getURLPattern = () => {\r\n  const protocol = '(\\\\w+:)?'\r\n  const user = '([^\\\\/\\\\?\\\\#\\\\:]+)'\r\n  const password = '(.+)'\r\n  const auth = '(' + user + ':' + password + '@)?'\r\n  const address = '(([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*(\\\\.)?)+[a-z]{2,})'\r\n  const ip = '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})'\r\n  const hostname = '(' + address + '|' + ip + ')'\r\n  const port = '(\\\\:\\\\d+)?'\r\n  const host = '(' + hostname + port + ')'\r\n  const pathname = '((\\\\/[-a-z\\\\d%_.~+]*)*)'\r\n  const search = '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'\r\n  const path = '(' + pathname + search + ')*'\r\n  const hash = '(\\\\#[-a-z\\\\d_]*)?'\r\n  const url = '^' + protocol + '\\\\/\\\\/' + auth + host + path + hash + '$'\r\n\r\n  return new RegExp(url, 'i')\r\n}\r\n\r\nexport default _getURLPattern\r\n","import parseURLWithRegExp from './parseURLWithRegExp'\r\nimport parseURLWithURLConstructor from './parseURLWithURLConstructor'\r\n\r\n/**\r\n * 分析 url 地址，将解析的结果作为对象返回，返回属性有：\r\n * 1. href - 完整 URL 地址\r\n * 2. protocol - 协议\r\n * 3. username - 用户名\r\n * 4. password - 密码\r\n * 5. host - 域名地址\r\n * 6. hostname - 域名名称\r\n * 7. port - 端口号\r\n * 8. path - 路径\r\n * 9. pathname - 路径名\r\n * 10. search - 查询参数\r\n * 11. hash - 哈希值\r\n * 12. origin\r\n * ====================================================\r\n * @method parseURL\r\n * @param {String} url - URL地址\r\n * @param {String} [base] - 基准 URL 地址\r\n * @returns {Object|Boolean}\r\n */\r\nconst parseURL = (url, base = undefined) => {\r\n  const startsWithProtocol = /^\\w+:/i\r\n  const isSupportURL = URL && new URL('http://www.yaohaixiao.com')\r\n\r\n  if (startsWithProtocol.test(url) && isSupportURL) {\r\n    return parseURLWithURLConstructor(url, base)\r\n  } else {\r\n    return parseURLWithRegExp(url, base)\r\n  }\r\n}\r\n\r\nexport default parseURL\r\n","/**\r\n * 分析 url 地址，将解析的结果作为对象返回，返回属性有：\r\n * 1. href - 完整 URL 地址\r\n * 2. origin - 原始输入\r\n * 3. protocol - 协议\r\n * 4. username - 用户名\r\n * 5. password - 密码\r\n * 6. host - 域名地址\r\n * 7. hostname - 域名名称\r\n * 8. port - 端口号\r\n * 9. path - 路径\r\n * 10. pathname - 路径名\r\n * 11. search - 查询参数\r\n * 12. searchParams\r\n * 13. hash - 哈希值\r\n * ====================================================\r\n * @param {String} url - URL地址\r\n * @param {String} [base] - 基准 URL 地址\r\n * @returns {Object}\r\n */\r\nconst parseURLWithURLConstructor = (url, base = undefined) => {\r\n  const results = new URL(url, base)\r\n  const href = results.href\r\n  const origin = results.origin\r\n  const protocol = results.protocol\r\n  const username = results.username\r\n  const password = results.password\r\n  const hostname = results.hostname\r\n  const port = results.port\r\n  const host = results.host\r\n  const pathname = results.pathname\r\n  const search = results.search\r\n  const searchParams = results.searchParams\r\n  const path = results.pathname + results.search\r\n  const hash = results.hash\r\n\r\n  return {\r\n    href,\r\n    origin,\r\n    protocol,\r\n    username,\r\n    password,\r\n    hostname,\r\n    port,\r\n    host,\r\n    pathname,\r\n    search,\r\n    searchParams,\r\n    path,\r\n    hash\r\n  }\r\n}\r\n\r\nexport default parseURLWithURLConstructor\r\n"],"names":["getSearchParams","url","params","match","reduce","a","v","index","indexOf","key","slice","value","replace","getURLSearchParams","get","name","parseURLWithRegExp","base","undefined","pattern","RegExp","slashAtTheEnd","matches","href","hostname","origin","protocol","username","password","port","host","pathname","search","path","hash","startsWith","exec","searchParams","isSupportURL","URL","test","results","parseURLWithURLConstructor"],"mappings":"yOAMA,MCJMA,EAAmBC,IACvB,MAAMC,EDGmB,EAACD,EAAM,MAExBA,EAAIE,MADI,yBACc,IAAIC,QAAO,CAACC,EAAGC,KAC3C,MAAMC,EAAQD,EAAEE,QAAQ,KAClBC,EAAMH,EAAEI,MAAM,EAAGH,GACjBI,EAAQL,EAAEI,MAAMH,EAAQ,GAC9B,OAAQF,EAAEI,GAAOE,EAAMC,QAAQ,MAAO,KAAOP,IAC5C,ICVYQ,CAAmBZ,GAElC,MAAO,CACLa,IAAIC,GACKb,EAAOa,IAAS,KAE1B,ECcGC,EAAqB,CAACf,EAAKgB,OAAOC,KACtC,MAAMC,ECRC,IAAIC,OAFC,2MAEW,KDSjBC,EAAgB,MACtB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAkBJ,OAhBIjB,GAEFA,EAAOA,EAAKL,QAAQS,EAAe,IAG9BpB,EAAIkC,WAAW,OAClBlC,EAAM,IAAMA,GAGdsB,EAAON,EAAOhB,GAEdsB,EAAOtB,EAGTqB,EAAUH,EAAQiB,KAAKb,GAEP,OAAZD,EACK,MAGTE,EAAWF,EAAQ,GACnBI,EAAWJ,EAAQ,IAAM,GACzBK,EAAWL,EAAQ,IAAM,GACzBM,EAAWN,EAAQ,IAAM,GACzBO,EAAOP,EAAQ,IAAMA,EAAQ,IAAIV,QAAQ,IAAK,IAAM,GACpDkB,EAAOR,EAAQ,GACfS,EAAWT,EAAQ,IACnBU,EAASV,EAAQ,KAAO,GACxBG,EAASC,EAAW,KAAOI,EAC3BG,EAAOX,EAAQ,IACfY,EAAOZ,EAAQ,KAAO,GAEf,CACLC,OACAE,SACAC,WACAC,WACAC,WACAJ,WACAK,OACAC,OACAC,WACAC,SACAK,aAAcrC,EAAgBgC,GAC9BC,OACAC,QACD,QE/Dc,CAACjC,EAAKgB,OAAOC,KAC5B,MACMoB,EAAeC,KAAO,IAAIA,IAAI,6BAEpC,MAH2B,SAGJC,KAAKvC,IAAQqC,ECPH,EAACrC,EAAKgB,KACvC,MAAMwB,EAAU,IAAIF,IAAItC,EAAKgB,GAe7B,MAAO,CACLM,KAfWkB,EAAQlB,KAgBnBE,OAfagB,EAAQhB,OAgBrBC,SAfee,EAAQf,SAgBvBC,SAfec,EAAQd,SAgBvBC,SAfea,EAAQb,SAgBvBJ,SAfeiB,EAAQjB,SAgBvBK,KAfWY,EAAQZ,KAgBnBC,KAfWW,EAAQX,KAgBnBC,SAfeU,EAAQV,SAgBvBC,OAfaS,EAAQT,OAgBrBK,aAfmBI,EAAQJ,aAgB3BJ,KAfWQ,EAAQV,SAAWU,EAAQT,OAgBtCE,KAfWO,EAAQP,KAgBpB,EDtBQQ,CAA2BzC,EAAKgB,GAEhCD,EAAmBf,EAAKgB,EAChC"}