{"version":3,"file":"parseURL.min.js","sources":["esm/getURLSearchParams.js","esm/getSearchParams.js","esm/parseURLWithRegExp.js","esm/_getURLPattern.js","esm/parseURL.js","esm/parseURLWithURLConstructor.js"],"sourcesContent":["/**\n * 返回 URL 地址中的查询参数（键/值）对象\n * ====================================================\n * @param {String} [url] - 可选参数，URL 地址\n * @returns {Object}\n */\nconst getURLSearchParams = (url = '') => {\n  const pattern = /([^?=&]+)(=([^&]*))/g\n  return (url.match(pattern) || []).reduce((a, v) => {\n    const index = v.indexOf('=')\n    const key = v.slice(0, index)\n    const value = v.slice(index + 1)\n    return (a[key] = value.replace(/\\+/g, ' ')), a\n  }, {})\n}\n\nexport default getURLSearchParams\n","import getURLSearchParams from './getURLSearchParams'\r\n\r\nconst getSearchParams = (url) => {\r\n  const params = getURLSearchParams(url)\r\n\r\n  return {\r\n    get(name) {\r\n      return params[name] || null\r\n    }\r\n  }\r\n}\r\n\r\nexport default getSearchParams\r\n","import getSearchParams from './getSearchParams'\nimport _getURLPattern from './_getURLPattern'\n\n/**\n * 分析 url 地址，将解析的结果作为对象返回，返回属性有：\n * 1. href - 完整 URL 地址\n * 2. protocol - 协议\n * 3. username - 用户名\n * 4. password - 密码\n * 5. host - 域名地址\n * 6. hostname - 域名名称\n * 7. port - 端口号\n * 8. path - 路径\n * 9. pathname - 路径名\n * 10. search - 查询参数\n * 11. hash - 哈希值\n * 12. origin\n * 13. searchParams\n * ====================================================\n * @param {String} url - URL地址\n * @param {String} [base] - 基准 URL 地址\n * @returns {Object|Null}\n */\nconst parseURLWithRegExp = (url, base = undefined) => {\n  // /^(([^:/?#]+):)?\\/\\/(([^/?#]+):(.+)@)?([^/?#:]*)(:(\\d+))?([^?#]*)(\\\\?([^#]*))?(#(.*))?/\n  const pattern = _getURLPattern()\n  const slashAtTheEnd = /\\/$/\n  let matches\n  let href\n  let hostname\n  let origin\n  let protocol\n  let username\n  let password\n  let port\n  let host\n  let pathname\n  let search\n  let path\n  let hash\n\n  if (base) {\n    // 移除 base 最后的斜杠 ‘/’\n    base = base.replace(slashAtTheEnd, '')\n\n    // 确保 url 开始有斜杠\n    if (!url.startsWith('/')) {\n      url = '/' + url\n    }\n\n    href = base + url\n  } else {\n    href = url\n  }\n\n  matches = pattern.exec(href)\n\n  if (matches === null) {\n    return null\n  }\n\n  hostname = matches[6]\n  protocol = matches[1] || ''\n  username = matches[3] || ''\n  password = matches[4] || ''\n  port = matches[13] ? matches[13].replace(':', '') : ''\n  host = matches[5]\n  pathname = matches[15]\n  search = matches[17] || ''\n  origin = protocol + '//' + host\n  path = matches[14]\n  hash = matches[18] || ''\n\n  return {\n    href,\n    origin,\n    protocol,\n    username,\n    password,\n    hostname,\n    port,\n    host,\n    pathname,\n    search,\n    path,\n    hash,\n    searchParams: getSearchParams(search)\n  }\n}\n\nexport default parseURLWithRegExp\n","const _getURLPattern = () => {\r\n  const protocol = '(\\\\w+:)?'\r\n  const user = '([^\\\\/\\\\?\\\\#\\\\:]+)'\r\n  const password = '(.+)'\r\n  const auth = '(' + user + ':' + password + '@)?'\r\n  const address = '(([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*(\\\\.)?)+[a-z]{2,})'\r\n  const ip = '((\\\\d{1,3}\\\\.){3}\\\\d{1,3})'\r\n  const hostname = '(' + address + '|' + ip + ')'\r\n  const port = '(\\\\:\\\\d+)?'\r\n  const host = '(' + hostname + port + ')'\r\n  const pathname = '((\\\\/[-a-z\\\\d%_.~+]*)*)'\r\n  const search = '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'\r\n  const path = '(' + pathname + search + ')*'\r\n  const hash = '(\\\\#[-a-z\\\\d_]*)?'\r\n  const url = '^' + protocol + '\\\\/\\\\/' + auth + host + path + hash + '$'\r\n\r\n  return new RegExp(url, 'i')\r\n}\r\n\r\nexport default _getURLPattern\r\n","import parseURLWithRegExp from './parseURLWithRegExp'\nimport parseURLWithURLConstructor from './parseURLWithURLConstructor'\n\n/**\n * 分析 url 地址，将解析的结果作为对象返回，返回属性有：\n * 1. href - 完整 URL 地址\n * 2. protocol - 协议\n * 3. username - 用户名\n * 4. password - 密码\n * 5. host - 域名地址\n * 6. hostname - 域名名称\n * 7. port - 端口号\n * 8. path - 路径\n * 9. pathname - 路径名\n * 10. search - 查询参数\n * 11. hash - 哈希值\n * 12. origin\n * ====================================================\n * @method parseURL\n * @param {String} url - URL地址\n * @param {String} [base] - 基准 URL 地址\n * @returns {Object|Boolean}\n */\nconst parseURL = (url, base = undefined) => {\n  const startsWithProtocol = /^\\w+:/i\n  const isSupportURL = URL && new URL('http://www.yaohaixiao.com')\n\n  if (startsWithProtocol.test(url) && isSupportURL) {\n    return parseURLWithURLConstructor(url, base)\n  } else {\n    return parseURLWithRegExp(url, base)\n  }\n}\n\nexport default parseURL\n","/**\n * 分析 url 地址，将解析的结果作为对象返回，返回属性有：\n * 1. href - 完整 URL 地址\n * 2. protocol - 协议\n * 3. username - 用户名\n * 4. password - 密码\n * 5. host - 域名地址\n * 6. hostname - 域名名称\n * 7. port - 端口号\n * 8. path - 路径\n * 9. pathname - 路径名\n * 10. search - 查询参数\n * 11. hash - 哈希值\n * 12. origin\n * 13. searchParams\n * ====================================================\n * @param {String} url - URL地址\n * @param {String} [base] - 基准 URL 地址\n * @returns {Object}\n */\nconst parseURLWithURLConstructor = (url, base = undefined) => {\n  const results = new URL(url, base)\n  const protocol = results.protocol\n\n  return {\n    href: results.href,\n    origin: results.origin,\n    protocol,\n    username: results.username,\n    password: results.password,\n    hostname: results.hostname,\n    port: results.port,\n    host: results.host,\n    pathname: results.pathname,\n    search: results.search,\n    path: results.pathname + results.search,\n    hash: results.hash,\n    searchParams: results.searchParams\n  }\n}\n\nexport default parseURLWithURLConstructor\n"],"names":["getSearchParams","url","params","match","reduce","a","v","index","indexOf","key","slice","value","replace","getURLSearchParams","get","name","parseURLWithRegExp","base","undefined","pattern","RegExp","slashAtTheEnd","matches","href","hostname","origin","protocol","username","password","port","host","pathname","search","path","hash","startsWith","exec","searchParams","isSupportURL","URL","test","results","parseURLWithURLConstructor"],"mappings":"yOAMA,MCJMA,EAAmBC,IACvB,MAAMC,EDGmB,EAACD,EAAM,MAExBA,EAAIE,MADI,yBACc,IAAIC,QAAO,CAACC,EAAGC,KAC3C,MAAMC,EAAQD,EAAEE,QAAQ,KAClBC,EAAMH,EAAEI,MAAM,EAAGH,GACjBI,EAAQL,EAAEI,MAAMH,EAAQ,GAC9B,OAAQF,EAAEI,GAAOE,EAAMC,QAAQ,MAAO,KAAOP,IAC5C,ICVYQ,CAAmBZ,GAElC,MAAO,CACLa,IAAIC,GACKb,EAAOa,IAAS,KAE1B,ECcGC,EAAqB,CAACf,EAAKgB,OAAOC,KAEtC,MAAMC,ECTC,IAAIC,OAFC,2MAEW,KDUjBC,EAAgB,MACtB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAkBJ,OAhBIjB,GAEFA,EAAOA,EAAKL,QAAQS,EAAe,IAG9BpB,EAAIkC,WAAW,OAClBlC,EAAM,IAAMA,GAGdsB,EAAON,EAAOhB,GAEdsB,EAAOtB,EAGTqB,EAAUH,EAAQiB,KAAKb,GAEP,OAAZD,EACK,MAGTE,EAAWF,EAAQ,GACnBI,EAAWJ,EAAQ,IAAM,GACzBK,EAAWL,EAAQ,IAAM,GACzBM,EAAWN,EAAQ,IAAM,GACzBO,EAAOP,EAAQ,IAAMA,EAAQ,IAAIV,QAAQ,IAAK,IAAM,GACpDkB,EAAOR,EAAQ,GACfS,EAAWT,EAAQ,IACnBU,EAASV,EAAQ,KAAO,GACxBG,EAASC,EAAW,KAAOI,EAC3BG,EAAOX,EAAQ,IACfY,EAAOZ,EAAQ,KAAO,GAEf,CACLC,OACAE,SACAC,WACAC,WACAC,WACAJ,WACAK,OACAC,OACAC,WACAC,SACAC,OACAC,OACAG,aAAcrC,EAAgBgC,IAC/B,QEhEc,CAAC/B,EAAKgB,OAAOC,KAC5B,MACMoB,EAAeC,KAAO,IAAIA,IAAI,6BAEpC,MAH2B,SAGJC,KAAKvC,IAAQqC,ECPH,EAACrC,EAAKgB,KACvC,MAAMwB,EAAU,IAAIF,IAAItC,EAAKgB,GACvBS,EAAWe,EAAQf,SAEzB,MAAO,CACLH,KAAMkB,EAAQlB,KACdE,OAAQgB,EAAQhB,OAChBC,WACAC,SAAUc,EAAQd,SAClBC,SAAUa,EAAQb,SAClBJ,SAAUiB,EAAQjB,SAClBK,KAAMY,EAAQZ,KACdC,KAAMW,EAAQX,KACdC,SAAUU,EAAQV,SAClBC,OAAQS,EAAQT,OAChBC,KAAMQ,EAAQV,SAAWU,EAAQT,OACjCE,KAAMO,EAAQP,KACdG,aAAcI,EAAQJ,aACvB,EDVQK,CAA2BzC,EAAKgB,GAEhCD,EAAmBf,EAAKgB,EAChC"}